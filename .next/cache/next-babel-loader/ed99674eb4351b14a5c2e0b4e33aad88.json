{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetJobAsync),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetJob),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetJobsAsync),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetJobs),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(root);\n\nimport { takeEvery, put, call, fork } from 'redux-saga/effects';\nimport { JobTypes } from '../redux/types';\nimport { getJobContent } from './apis';\nexport function watchGetJobAsync(jobID) {\n  var id, data, payload;\n  return _regeneratorRuntime.wrap(function watchGetJobAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = jobID.id;\n          _context.next = 3;\n          return call(getJobContent);\n\n        case 3:\n          data = _context.sent;\n          payload = {\n            data: data,\n            id: id\n          };\n          _context.next = 7;\n          return put({\n            type: JobTypes.GET_JOB_ASYNC,\n            payload: payload\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchGetJob() {\n  return _regeneratorRuntime.wrap(function watchGetJob$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(JobTypes.GET_JOB, watchGetJobAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport function watchGetJobsAsync() {\n  var data;\n  return _regeneratorRuntime.wrap(function watchGetJobsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return call(getJobContent);\n\n        case 2:\n          data = _context3.sent;\n          _context3.next = 5;\n          return put({\n            type: JobTypes.GET_JOBS_ASYNC,\n            data: data\n          });\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchGetJobs() {\n  return _regeneratorRuntime.wrap(function watchGetJobs$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(JobTypes.GET_JOBS, watchGetJobsAsync);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function root() {\n  return _regeneratorRuntime.wrap(function root$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return fork(watchGetJobs);\n\n        case 2:\n          _context5.next = 4;\n          return fork(watchGetJob);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/shipatwa/Desktop/challenges/heyjobs_challenge/src/sagas/sagas.ts"],"names":["watchGetJobAsync","watchGetJob","watchGetJobsAsync","watchGetJobs","root","takeEvery","put","call","fork","JobTypes","getJobContent","jobID","id","data","payload","type","GET_JOB_ASYNC","GET_JOB","GET_JOBS_ASYNC","GET_JOBS"],"mappings":";;;;yBAIiBA,gB;;;yBAOPC,W;;;yBAIOC,iB;;;yBAKPC,Y;;;yBAIeC,I;;AAxBzB,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,aAAT,QAA8B,QAA9B;AAEA,OAAO,SAAUV,gBAAV,CAA2BW,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,UAAAA,EADJ,GACUD,KADV,CACIC,EADJ;AAAA;AAEU,iBAAML,IAAI,CAACG,aAAD,CAAV;;AAFV;AAEGG,UAAAA,IAFH;AAGGC,UAAAA,OAHH,GAGa;AAACD,YAAAA,IAAI,EAAJA,IAAD;AAAOD,YAAAA,EAAE,EAAFA;AAAP,WAHb;AAAA;AAIH,iBAAMN,GAAG,CAAC;AAACS,YAAAA,IAAI,EAAEN,QAAQ,CAACO,aAAhB;AAA+BF,YAAAA,OAAO,EAAPA;AAA/B,WAAD,CAAT;;AAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOP,SAAUb,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,SAAS,CAACI,QAAQ,CAACQ,OAAV,EAAmBjB,gBAAnB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,OAAO,SAAUE,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACU,iBAAMK,IAAI,CAACG,aAAD,CAAV;;AADV;AACGG,UAAAA,IADH;AAAA;AAEH,iBAAMP,GAAG,CAAC;AAACS,YAAAA,IAAI,EAAEN,QAAQ,CAACS,cAAhB;AAAgCL,YAAAA,IAAI,EAAJA;AAAhC,WAAD,CAAT;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKP,SAAUV,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAME,SAAS,CAACI,QAAQ,CAACU,QAAV,EAAoBjB,iBAApB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMI,IAAI,CAACL,YAAD,CAAV;;AADW;AAAA;AAEX,iBAAMK,IAAI,CAACP,WAAD,CAAV;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, put, call, fork } from 'redux-saga/effects';\nimport { JobTypes } from '../redux/types';\nimport { getJobContent } from './apis';\n\nexport function* watchGetJobAsync(jobID) {\n    const {id} = jobID;\n    const data = yield call(getJobContent);\n    const payload = {data, id};\n    yield put({type: JobTypes.GET_JOB_ASYNC, payload});\n}\n\nfunction* watchGetJob() {\n    yield takeEvery(JobTypes.GET_JOB, watchGetJobAsync)\n}\n\nexport function* watchGetJobsAsync() {\n    const data = yield call(getJobContent);\n    yield put({type: JobTypes.GET_JOBS_ASYNC, data})\n}\n\nfunction* watchGetJobs() {\n    yield takeEvery(JobTypes.GET_JOBS, watchGetJobsAsync)\n}\n\nexport default function* root() {\n    yield fork(watchGetJobs);\n    yield fork(watchGetJob);\n}\n"]},"metadata":{},"sourceType":"module"}